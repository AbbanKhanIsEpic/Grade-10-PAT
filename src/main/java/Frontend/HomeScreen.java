/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;

import Backend.FriendManager;
import Backend.GroupManager;
import Backend.MessageManager;
import Backend.FriendMessageThread;
import Backend.GroupMessageThread;
import Backend.MessageVisualManager;
import Backend.UserManager;
import java.awt.Image;
import java.awt.Toolkit;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;

/**
 *
 * @author abban
 */
public class HomeScreen extends javax.swing.JFrame {

    /**
     * Creates new form HomeScreen
     */
    private String username;
    private String selectedFriend;
    private String displayName;

    private int indexOfSelectedGroup;

    FriendMessageThread friendMessageThread;

    GroupMessageThread groupMessageThread;

    private DefaultListModel defaultFriendOrGroupListModel = new DefaultListModel();

    public HomeScreen() {
        initComponents();

    }

    public HomeScreen(String username) {
        try {
            initComponents();

            friendMessageThread = null;

            groupMessageThread = null;

            this.setTitle("Welcome to ChatBun");

            this.username = username;

            displayName = UserManager.getDisplayName(username);

            WelcomeLabel.setText("Welcome: " + displayName);

            setLocationRelativeTo(null);

            String messageTextFont = MessageVisualManager.getTextFont(username);

            int messageTextSize = MessageVisualManager.getTextSize(username);

            ViewMessageTextArea.setFont(new java.awt.Font(messageTextFont, 0, messageTextSize));

            String[] friendList = FriendManager.getFriends(username);

            String[] connectedAccountList = UserManager.getConnectedAccount(username);

            defaultFriendOrGroupListModel.clear();

            DefaultComboBoxModel defaultConnectedAccountComboBoxModel = new DefaultComboBoxModel();

            for (String friend : friendList) {

                boolean isFriendBlocked = FriendManager.isBlocked(username, friend);

                String friendDisplayName = UserManager.getDisplayName(friend);

                defaultFriendOrGroupListModel.addElement(friendDisplayName);

            }

            FriendORGroupList.setModel(defaultFriendOrGroupListModel);

            for (String connectedAccountList1 : connectedAccountList) {

                defaultConnectedAccountComboBoxModel.addElement(connectedAccountList1);

            }

            SwapAccountComboBox.setModel(defaultConnectedAccountComboBoxModel);

        } catch (SQLException ex) {
            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textingBackground1 = new Backgrounds.TextingBackground();
        TalkToLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        ViewMessageTextArea = new javax.swing.JTextArea();
        SendMessageTextField = new javax.swing.JTextField();
        SendMessgeButton = new javax.swing.JButton();
        SeparatorSplitPane = new javax.swing.JSplitPane();
        sideMenuBackground1 = new Backgrounds.SideMenuBackground();
        FriendsOrGroupToggleButton = new javax.swing.JToggleButton();
        SettingButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        SwapAccountComboBox = new javax.swing.JComboBox<>();
        BlockButton = new javax.swing.JButton();
        Separator3 = new javax.swing.JSeparator();
        DeleteMessageButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        FriendORGroupList = new javax.swing.JList<>();
        WelcomeLabel = new javax.swing.JLabel();
        RemoveOrExitButton = new javax.swing.JButton();
        Separator2 = new javax.swing.JSeparator();
        swapAccountLabel = new javax.swing.JLabel();
        Separator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 255, 204));

        ViewMessageTextArea.setEditable(false);
        ViewMessageTextArea.setColumns(20);
        ViewMessageTextArea.setFont(new java.awt.Font("Dialog", 0, 12)); // NOI18N
        ViewMessageTextArea.setRows(5);
        jScrollPane2.setViewportView(ViewMessageTextArea);

        SendMessgeButton.setText("Send");
        SendMessgeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendMessgeButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout textingBackground1Layout = new javax.swing.GroupLayout(textingBackground1);
        textingBackground1.setLayout(textingBackground1Layout);
        textingBackground1Layout.setHorizontalGroup(
            textingBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textingBackground1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(textingBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(textingBackground1Layout.createSequentialGroup()
                        .addComponent(SendMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                        .addComponent(SendMessgeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2)
                    .addComponent(TalkToLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        textingBackground1Layout.setVerticalGroup(
            textingBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(textingBackground1Layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(TalkToLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(textingBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SendMessgeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        FriendsOrGroupToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/friend_icon.png"))); // NOI18N
        FriendsOrGroupToggleButton.setText("Friends");
        FriendsOrGroupToggleButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FriendsOrGroupToggleButtonItemStateChanged(evt);
            }
        });

        SettingButton.setText("Settings");
        SettingButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SettingButtonActionPerformed(evt);
            }
        });

        AddButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/Add_icon.png"))); // NOI18N
        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        SwapAccountComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        SwapAccountComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                SwapAccountComboBoxItemStateChanged(evt);
            }
        });

        BlockButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/block_icon.png"))); // NOI18N
        BlockButton.setText("Block");
        BlockButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlockButtonActionPerformed(evt);
            }
        });

        DeleteMessageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete_message_icon.png"))); // NOI18N
        DeleteMessageButton.setText("Delete message");
        DeleteMessageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMessageButtonActionPerformed(evt);
            }
        });

        FriendORGroupList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = {  };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        FriendORGroupList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                FriendORGroupListMouseClicked(evt);
            }
        });
        FriendORGroupList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                FriendORGroupListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(FriendORGroupList);

        WelcomeLabel.setForeground(new java.awt.Color(51, 51, 55));
        WelcomeLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/hand_wave_icon.png"))); // NOI18N
        WelcomeLabel.setText("Welcome back ");

        RemoveOrExitButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/delete_icon.png"))); // NOI18N
        RemoveOrExitButton.setText("Remove");
        RemoveOrExitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveOrExitButtonActionPerformed(evt);
            }
        });

        swapAccountLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/change_account_icon.png"))); // NOI18N
        swapAccountLabel.setText("Swap account:");

        javax.swing.GroupLayout sideMenuBackground1Layout = new javax.swing.GroupLayout(sideMenuBackground1);
        sideMenuBackground1.setLayout(sideMenuBackground1Layout);
        sideMenuBackground1Layout.setHorizontalGroup(
            sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sideMenuBackground1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sideMenuBackground1Layout.createSequentialGroup()
                                .addComponent(SettingButton)
                                .addGap(423, 423, 423))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                                    .addGap(58, 58, 58)
                                    .addComponent(swapAccountLabel)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(SwapAccountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(Separator3)
                                .addComponent(jScrollPane1)
                                .addComponent(Separator2)
                                .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                                    .addComponent(BlockButton, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                                    .addComponent(DeleteMessageButton))
                                .addComponent(FriendsOrGroupToggleButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(WelcomeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(Separator1, javax.swing.GroupLayout.DEFAULT_SIZE, 366, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(RemoveOrExitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(AddButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(76, Short.MAX_VALUE))
        );
        sideMenuBackground1Layout.setVerticalGroup(
            sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(WelcomeLabel))
                    .addGroup(sideMenuBackground1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addComponent(SettingButton)))
                .addGap(18, 18, 18)
                .addComponent(Separator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SwapAccountComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(swapAccountLabel))
                .addGap(18, 18, 18)
                .addComponent(Separator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(FriendsOrGroupToggleButton)
                    .addComponent(AddButton))
                .addGap(21, 21, 21)
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RemoveOrExitButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Separator3, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addGroup(sideMenuBackground1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteMessageButton)
                    .addComponent(BlockButton))
                .addGap(58, 58, 58))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(sideMenuBackground1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(SeparatorSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textingBackground1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sideMenuBackground1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textingBackground1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SeparatorSplitPane, javax.swing.GroupLayout.PREFERRED_SIZE, 671, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DeleteMessageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMessageButtonActionPerformed
        // TODO add your handling code here:
        if (FriendsOrGroupToggleButton.getText().equals("Friends")) {
            try {
                FriendManager.deleteMessage(username, selectedFriend);
            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                GroupManager.deleteMessage(username, indexOfSelectedGroup);
            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_DeleteMessageButtonActionPerformed

    private void BlockButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlockButtonActionPerformed
        // TODO add your handling code here:
        boolean isTextEqualsFriends = FriendsOrGroupToggleButton.getText().equals("Friends");
        boolean isTextEqualsBlock = BlockButton.getText().equals("Block");

        if (isTextEqualsFriends) {

            if (isTextEqualsBlock) {

                try {

                    FriendManager.blockFriend(username, selectedFriend);

                    TalkToLabel.setText("You are currently talking to: " + FriendORGroupList.getSelectedValue() + " (Blocked)");

                    BlockButton.setText("Unblock");

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                try {

                    FriendManager.unblockFriend(username, selectedFriend);

                    TalkToLabel.setText("You are currently talking to: " + FriendORGroupList.getSelectedValue());

                    BlockButton.setText("Block");

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        } else {

            if (isTextEqualsBlock) {

                try {

                    GroupManager.blockGroup(username, indexOfSelectedGroup);

                    TalkToLabel.setText("You are currently talking to: " + FriendORGroupList.getSelectedValue() + " (Blocked)");

                    BlockButton.setText("Unblock");

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else {

                try {

                    GroupManager.unblockGroup(username, indexOfSelectedGroup);

                    TalkToLabel.setText("You are currently talking to: " + FriendORGroupList.getSelectedValue());

                    BlockButton.setText("Block");

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            }

        }

    }//GEN-LAST:event_BlockButtonActionPerformed

    private void SettingButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SettingButtonActionPerformed
        // TODO add your handling code here:
        if (friendMessageThread != null) {

            friendMessageThread.stopRunning();

        }
        if (groupMessageThread != null) {

            groupMessageThread.stopRunning();

        }

        new SettingScreen(username).setVisible(true);
        dispose();

    }//GEN-LAST:event_SettingButtonActionPerformed

    private void SendMessgeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendMessgeButtonActionPerformed

        String messageToSend = SendMessageTextField.getText();

        if (FriendsOrGroupToggleButton.getText().equals("Friends")) {

            try {

                MessageManager.sendFriendMessage(username, selectedFriend, messageToSend);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {

                MessageManager.sendGroupMessage(username, indexOfSelectedGroup, messageToSend);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_SendMessgeButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        if (friendMessageThread != null) {

            friendMessageThread.stopRunning();

        }
        if (groupMessageThread != null) {

            groupMessageThread.stopRunning();

        }

        boolean isToggleButtonTextEqualsFriends = FriendsOrGroupToggleButton.getText().equals("Friends");

        if (isToggleButtonTextEqualsFriends) {

            new AddFriendScreen(username).setVisible(true);
            dispose();

        } else {

            new AddGroupScreen(username).setVisible(true);
            dispose();

        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void FriendORGroupListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_FriendORGroupListValueChanged

        String showBlock = "";

        try {
            // TODO add your handling code here:

            if (FriendsOrGroupToggleButton.getText().equals("Friends") && FriendORGroupList.getSelectedIndex() != -1) {

                selectedFriend = FriendManager.getFriendUsername(username, FriendORGroupList.getSelectedIndex());

                try {

                    boolean result = FriendManager.isBlocked(username, selectedFriend);

                    if (friendMessageThread != null) {
                        friendMessageThread.stopRunning();
                    }
                    friendMessageThread = new FriendMessageThread(username, selectedFriend, ViewMessageTextArea);

                    if (result) {

                        showBlock = " (Blocked)";

                        BlockButton.setText("Unblock");

                    } else {

                        BlockButton.setText("Block");

                    }

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }

            } else if (FriendORGroupList.getSelectedIndex() != -1) {
                try {

                    indexOfSelectedGroup = FriendORGroupList.getSelectedIndex();

                    boolean result = GroupManager.isBlocked(username, indexOfSelectedGroup);

                    if (groupMessageThread != null) {
                        groupMessageThread.stopRunning();
                    }
                    groupMessageThread = new GroupMessageThread(username, indexOfSelectedGroup, ViewMessageTextArea);

                    if (result) {

                        showBlock = " (Blocked)";

                        BlockButton.setText("Unblock");

                    } else {

                        BlockButton.setText("Block");

                    }

                } catch (SQLException ex) {
                    Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            TalkToLabel.setText("You are currently talking to: " + FriendORGroupList.getSelectedValue() + showBlock);
        } catch (SQLException ex) {
            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_FriendORGroupListValueChanged

    private void FriendORGroupListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_FriendORGroupListMouseClicked
        // https://stackoverflow.com/questions/4344682/double-click-event-on-jlist-element
        if (evt.getClickCount() == 2 && FriendsOrGroupToggleButton.getText().equals("Friends")) {

            if (friendMessageThread != null) {

                friendMessageThread.stopRunning();

            }
            if (groupMessageThread != null) {

                groupMessageThread.stopRunning();

            }

            new ProfileScreen(selectedFriend, username).setVisible(true);
            dispose();

        }
    }//GEN-LAST:event_FriendORGroupListMouseClicked

    private void SwapAccountComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_SwapAccountComboBoxItemStateChanged
        if (friendMessageThread != null) {

            friendMessageThread.stopRunning();

        }
        if (groupMessageThread != null) {

            groupMessageThread.stopRunning();

        }
        try {
            // TODO add your handling code here:
            TalkToLabel.setText("");

            String selectedAccount = (String) SwapAccountComboBox.getSelectedItem();

            username = selectedAccount;

            String newDisplayName = UserManager.getDisplayName(username);

            WelcomeLabel.setText("Welcome: " + newDisplayName);

            FriendsOrGroupToggleButton.setText("Friends");
            FriendsOrGroupToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/friend_icon.png")));
            FriendsOrGroupToggleButton.setSelected(false);

            try {

                String[] friendList = FriendManager.getFriends(username);

                defaultFriendOrGroupListModel.clear();

                for (String friend : friendList) {

                    String friendDisplayName = UserManager.getDisplayName(friend);

                    defaultFriendOrGroupListModel.addElement(friendDisplayName);

                }

                FriendORGroupList.setModel(defaultFriendOrGroupListModel);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (SQLException ex) {
            Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_SwapAccountComboBoxItemStateChanged

    private void RemoveOrExitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveOrExitButtonActionPerformed
        // TODO add your handling code here:
        if (FriendsOrGroupToggleButton.getText().equals("Friends")) {
            try {

                FriendManager.removeFriend(username, selectedFriend);

                String[] friendList = FriendManager.getFriends(username);

                defaultFriendOrGroupListModel.clear();

                for (String friendList1 : friendList) {

                    defaultFriendOrGroupListModel.addElement(friendList1);

                }

                FriendORGroupList.setModel(defaultFriendOrGroupListModel);

                FriendORGroupList.setSelectedIndex(0);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            try {

                GroupManager.exitGroup(username, indexOfSelectedGroup);

                String[] groupList = GroupManager.getGroupNames(username);

                defaultFriendOrGroupListModel.clear();

                for (String groupList1 : groupList) {

                    defaultFriendOrGroupListModel.addElement(groupList1);

                }

                FriendORGroupList.setModel(defaultFriendOrGroupListModel);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

    }//GEN-LAST:event_RemoveOrExitButtonActionPerformed

    private void FriendsOrGroupToggleButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FriendsOrGroupToggleButtonItemStateChanged
        // TODO add your handling code here:
        if (friendMessageThread != null) {

            friendMessageThread.stopRunning();

        }
        if (groupMessageThread != null) {

            groupMessageThread.stopRunning();

        }

        if (evt.getStateChange() == 1) {

            FriendsOrGroupToggleButton.setText("Groups");
            FriendsOrGroupToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/group_icon.png")));
            RemoveOrExitButton.setText("Exit");

            try {

                String[] groupList = GroupManager.getGroupNames(username);

                defaultFriendOrGroupListModel.clear();

                for (String groupList1 : groupList) {

                    defaultFriendOrGroupListModel.addElement(groupList1);

                }

                FriendORGroupList.setModel(defaultFriendOrGroupListModel);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        } else {

            FriendsOrGroupToggleButton.setText("Friends");
            FriendsOrGroupToggleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/friend_icon.png")));
            RemoveOrExitButton.setText("Remove");

            try {

                String[] friendList = FriendManager.getFriends(username);

                defaultFriendOrGroupListModel.clear();

                for (String friend : friendList) {

                    String friendDisplayName = UserManager.getDisplayName(friend);

                    defaultFriendOrGroupListModel.addElement(friendDisplayName);

                }

                FriendORGroupList.setModel(defaultFriendOrGroupListModel);

            } catch (SQLException ex) {
                Logger.getLogger(HomeScreen.class.getName()).log(Level.SEVERE, null, ex);
            }

        }

        ViewMessageTextArea.setText("");

        TalkToLabel.setText("");

    }//GEN-LAST:event_FriendsOrGroupToggleButtonItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new HomeScreen().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BlockButton;
    private javax.swing.JButton DeleteMessageButton;
    private javax.swing.JList<String> FriendORGroupList;
    private javax.swing.JToggleButton FriendsOrGroupToggleButton;
    private javax.swing.JButton RemoveOrExitButton;
    private javax.swing.JTextField SendMessageTextField;
    private javax.swing.JButton SendMessgeButton;
    private javax.swing.JSeparator Separator1;
    private javax.swing.JSeparator Separator2;
    private javax.swing.JSeparator Separator3;
    private javax.swing.JSplitPane SeparatorSplitPane;
    private javax.swing.JButton SettingButton;
    private javax.swing.JComboBox<String> SwapAccountComboBox;
    private javax.swing.JLabel TalkToLabel;
    private javax.swing.JTextArea ViewMessageTextArea;
    private javax.swing.JLabel WelcomeLabel;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private Backgrounds.SideMenuBackground sideMenuBackground1;
    private javax.swing.JLabel swapAccountLabel;
    private Backgrounds.TextingBackground textingBackground1;
    // End of variables declaration//GEN-END:variables
}
